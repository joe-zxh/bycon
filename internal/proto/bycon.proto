syntax = "proto3";

package proto;

import "google/protobuf/empty.proto";

option go_package = "github.com/joe-zxh/bycon/internal/proto";

service BYCON {

  rpc PrePrepare(PrePrepareArgs) returns (google.protobuf.Empty) {
  }

  rpc Prepare(PrepareArgs) returns (google.protobuf.Empty) {
  }

  rpc Commit(CommitArgs) returns (google.protobuf.Empty) {
  }

  // view change...
  rpc PreRequestVote(PreRequestVoteArgs) returns (PreRequestVoteReply) {
  }

  rpc RequestVote(RequestVoteArgs) returns (google.protobuf.Empty) {
  }

  rpc VoteConfirm(VoteConfirmArgs) returns (google.protobuf.Empty) {
  }

}

message PreRequestVoteArgs {
  uint32 NewView = 1;
  uint32 LastPreparedView = 2;
  uint32 LastPreparedSeq = 3;
}

message PreRequestVoteReply {
  uint32 ReceiverLastPreparedView = 1;
  uint32 ReceiverLastPreparedSeq = 2;

}

message RequestVoteArgs {
  uint32 NewView = 1;
  uint32 CandidateID = 2;
  bytes Digest = 3;
}

message VoteConfirmArgs {
  uint32 NewView = 1;
  uint32 NodeID = 2;
  uint32 VoteFor = 3;
}

message PrePrepareArgs {
  uint32 Sender = 1;
  uint32 View = 2;
  uint32 Seq = 3;
  repeated Command Commands = 4;
}

// 可以通过设置context的方式来获取Sender，但简单起见，直接设置Sender。
message PrepareArgs {
  uint32 Sender = 1;
  uint32 View = 2;
  uint32 Seq = 3;
  bytes Digest = 4;
}

message CommitArgs {
  uint32 Sender = 1;
  uint32 View = 2;
  uint32 Seq = 3;
  bytes Digest = 4;
}

message Command {bytes Data = 1;}
